<?xml version="1.0" encoding="UTF-8"?>
<!-- -->
<!-- To build for Maven Central:
(Note: Only the primary developers should ever need to build for Maven Central.
All other people and programmers can ignore this paragraph.)
To build for Maven Central, with GPG signing, you will have to uncomment all
sections of this pom file that are marked with the word "signing".
-->
<!-- -->
<!-- General notes:
The ordering of the plugins in this file matters. The execution order for any plugin executions
that are on the same phase will be the same as the order of entries in the pom file. Multiple
plugins in this file operate inside the "package" and "install" phases.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.github.lgooddatepicker</groupId>
    <artifactId>LGoodDatePicker</artifactId>
    <version>11.1.0</version>
    <packaging>jar</packaging>
    <name>LGoodDatePicker</name>
    <description>Java Swing Date Picker. Easy to use, good looking, nice features, and
        localized. Uses the JSR-310 standard.</description>
    <url>https://github.com/LGoodDatePicker/LGoodDatePicker</url>
    <licenses>
        <license>
            <name>The MIT License (MIT)</name>
            <url>https://opensource.org/licenses/MIT</url>
        </license>
    </licenses>
    <developers>
        <developer>
            <name>BlakeTNC</name>
            <email>BlakeTNC@gmailRemoveThisNoSpam.com</email>
            <organization>LGoodDatePicker</organization>
            <organizationUrl>https://github.com/LGoodDatePicker/LGoodDatePicker</organizationUrl>
        </developer>
    </developers>
    <scm>
        <connection>scm:git:git@github.com:LGoodDatePicker/LGoodDatePicker.git</connection>
        <developerConnection>scm:git:git@github.com:LGoodDatePicker/LGoodDatePicker.git</developerConnection>
        <url>git@github.com:LGoodDatePicker/LGoodDatePicker.git</url>
    </scm>

    <!-- ## Instructions for switching between Java 1.8 releases, and Java 1.6 releases. ##
        Note: The project should only be committed to the GitHub master branch, while configured
        for Java 1.8.

        * For Java 1.6:
        * In the POM properties section: Switch the maven source and target to 1.6.
        * In the POM dependencies section: Uncomment the dependency section for "threetenbp".
        * Replace the following string in all the project source files:
          - "import java(dot)time" with "import org.threeten(dot)bp".

        * For Java 1.8:
        * In the POM properties section: Switch the maven source and target to 1.8.
        * In the POM dependencies section: Comment out the dependency section for "threetenbp".
        * Replace the following string in all the project source files:
          - "import org.threeten(dot)bp" with "import java(dot)time".
    -->

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <!-- <maven.compiler.release>8</maven.compiler.release> you might need to uncomment this this to compile with JDK > 8 -->
    </properties>

    <dependencies>

        <!-- JSRThreeTen Backport. Uncomment this section when building for target Java 1.6. -->
        <!--
        <dependency>
            <groupId>org.threeten</groupId>
            <artifactId>threetenbp</artifactId>
            <version>1.3.1</version>
        </dependency>
        -->

        <!-- BeansBinding, This is only used in the data binding demo.
             uncomment this if you want to compile the data binding demo
        <dependency>
            <groupId>org.jdesktop</groupId>
            <artifactId>beansbinding</artifactId>
            <version>1.2.1</version>
        </dependency> -->

        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <profiles>
        <!-- Deployment profile used so signing plugin is only used when deploying -->
        <profile>
            <id>deploy</id>
            <build>
                <plugins>
                    <!-- GPG plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                        <version>1.6</version>
                        <executions>
                            <execution>
                                <id>sign-artifacts</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>sign</goal>
                                </goals>
                                <configuration>
                                    <!-- Prevent `gpg` from using pinentry programs -->
                                    <gpgArguments>
                                        <arg>--pinentry-mode</arg>
                                        <arg>loopback</arg>
                                    </gpgArguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>deployinstall</id>
                                <phase>install</phase>
                                <configuration>
                                    <tasks>
                                        <echo message = ">>>>>>>>>>>>>>>>>>>>>>>>>>>> install (deploy)"/>
                                        <delete file="${project.build.directory}/${project.artifactId}-${project.version}.pom.asc"/>
                                        <copy file="${project.build.directory}/pom-for-users.txt.asc" tofile="${project.build.directory}/${project.artifactId}-${project.version}.pom.asc"/>
                                        <copy file="${project.build.directory}/${project.artifactId}-${project.version}.jar.asc" tofile="${project.build.directory}/${project.artifactId}-${project.version}-unshaded-for-backport.jar.asc"/>
                                        <delete file="${project.build.directory}/${project.artifactId}-${project.version}.jar.asc"/>
                                        <copy file="${project.build.directory}/${project.artifactId}-${project.version}-core.jar.asc" tofile="${project.build.directory}/${project.artifactId}-${project.version}.jar.asc"/>
                                        <copy file="${project.build.directory}/${project.artifactId}-${project.version}-core.jar.asc" tofile="${project.build.directory}/${project.artifactId}-${project.version}-executable-demo.jar.asc"/>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.4.0</version>
                        <executions>
                            <execution>
                                <id>createbundle</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <configuration>
                                    <executable>${env.JAVA_HOME}/bin/jar</executable>
                                    <workingDirectory>${project.build.directory}</workingDirectory>
                                    <arguments>
                                        <argument>-cvf</argument>
                                        <argument>Bundle-${project.artifactId}-${project.version}.jar</argument>
                                        <argument>${project.artifactId}-${project.version}.pom</argument>
                                        <argument>${project.artifactId}-${project.version}.pom.asc</argument>
                                        <argument>${project.artifactId}-${project.version}.jar</argument>
                                        <argument>${project.artifactId}-${project.version}.jar.asc</argument>
                                        <argument>${project.artifactId}-${project.version}-executable-demo.jar</argument>
                                        <argument>${project.artifactId}-${project.version}-executable-demo.jar.asc</argument>
                                        <argument>${project.artifactId}-${project.version}-javadoc.jar</argument>
                                        <argument>${project.artifactId}-${project.version}-javadoc.jar.asc</argument>
                                        <argument>${project.artifactId}-${project.version}-sources.jar</argument>
                                        <argument>${project.artifactId}-${project.version}-sources.jar.asc</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin> -->
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>

        <resources>
            <resource>
                <!-- This turns on resource filtering so we can get the version number at runtime. -->
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <compilerArgs>
                        <arg>-Xlint:deprecation</arg>
                        <arg>-Xlint:unchecked</arg>
                    </compilerArgs>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.1</version>
                <configuration>
                    <source>8</source>
                    <!-- Turn off errors resulting from the new (strict) Java 8 Javadoc standards. -->
                    <doclint>none</doclint>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.1.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>core</shadedClassifierName> <!-- Any name that makes sense -->
                            <createDependencyReducedPom>false</createDependencyReducedPom>
                            <transformers>
                                <!-- Note: Do not include any other transformers or lines which
                                might cause maven or shade to create a manifest file. -->
                                <!-- This will exclude any other manifest files from the jar, besides my custom manifest file. -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                                    <resource>MANIFEST.MF</resource>
                                </transformer>
                                <!-- This will add my custom manifest file to the jar. -->
                                <transformer implementation="org.apache.maven.plugins.shade.resource.IncludeResourceTransformer">
                                    <resource>META-INF/MANIFEST.MF</resource>
                                    <file>src/main/resources/META-INF/MANIFEST.MF</file>
                                </transformer>
                            </transformers>
                            <minimizeJar>true</minimizeJar>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>package</id>
                        <phase>package</phase>
                        <configuration>
                            <tasks>
                                <echo message = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>package"/>
                                <copy file="${basedir}/target/classes/pom-for-users.txt" tofile="${project.build.directory}/pom-for-users.txt"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>install</id>
                        <phase>install</phase>
                        <configuration>
                            <tasks>
                                <echo message = ">>>>>>>>>>>>>>>>>>>>>>>>>>>>install"/>
                                <delete file="${project.build.directory}/${project.artifactId}-${project.version}.pom"/>
                                <copy file="${project.build.directory}/pom-for-users.txt" tofile="${project.build.directory}/${project.artifactId}-${project.version}.pom"/>
                                <copy file="${project.build.directory}/${project.artifactId}-${project.version}.jar" tofile="${project.build.directory}/${project.artifactId}-${project.version}-unshaded-for-backport.jar"/>
                                <delete file="${project.build.directory}/${project.artifactId}-${project.version}.jar"/>
                                <copy file="${project.build.directory}/${project.artifactId}-${project.version}-core.jar" tofile="${project.build.directory}/${project.artifactId}-${project.version}.jar"/>
                                <copy file="${project.build.directory}/${project.artifactId}-${project.version}-core.jar" tofile="${project.build.directory}/${project.artifactId}-${project.version}-executable-demo.jar"/>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <id>attach-artifacts</id>
                        <phase>package</phase>
                        <goals>
                            <goal>attach-artifact</goal>
                        </goals>
                        <configuration>
                            <artifacts>
                                <artifact>
                                    <file>${project.build.directory}/pom-for-users.txt</file>
                                    <type>pom</type>
                                </artifact>
                            </artifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.sonatype.plugins</groupId>
                <artifactId>nexus-staging-maven-plugin</artifactId>
                <version>1.6.8</version>
                <extensions>true</extensions>
                <configuration>
                    <serverId>ossrh</serverId>
                    <nexusUrl>https://oss.sonatype.org/</nexusUrl>
                    <autoReleaseAfterClose>false</autoReleaseAfterClose>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <distributionManagement>
        <snapshotRepository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
    </distributionManagement>

</project>

